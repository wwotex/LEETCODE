instead of typical C++ syntax use Python functions: 
    for i, el in enumerate(list):
    for el1, el2 in zip(l1, l2):

instead of left and right prefix tables use total sum and a dynamically changing left prefix:
    S = sum(nums)
    leftsum = 0
    for i, el in enumerate(nums):
        if leftsum == (S - el - leftsum):
            return i
        leftsum += el

python dictionary to check if something exists AND if it is equal something use .get function:
    instead of:
        if el not in D or D[el] != x:
    use:
        if D.get(el) != x:

reversing linked lists - quite complicated to get it right - important intuition behind iterative approach -> 
first at each step you save the next node and then you redirect the "arrow" from current to previous node and then
you rename previous to current and current to next
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        curr = head
        prev = None
        while curr is not None:
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
        return prev

prefix sum with dictionary method 
keeping the prefix sum and saving them in the dictionary to find all paths that sum to target

for algorithms like BFS from multiple starting points with keeping track of the timesteps 
instead of using two queues (one as a buffer) use a delimiter element to add timesteps

instead of 
    cell = Q.pop()
use
    (x, y) = Q.pop()

when using nested functions use the NONLOCAL keyword for accessing nonlocal variables

minStack -> use two stacks the other one for keeping track of the minimum value at each point